var documenterSearchIndex = {"docs":
[{"location":"api/axioms/#Axioms","page":"Axioms","title":"Axioms","text":"","category":"section"},{"location":"api/axioms/","page":"Axioms","title":"Axioms","text":"SpectralIndex\ncompute\nPlatformBand\nBand\nConstant","category":"page"},{"location":"api/axioms/#SpectralIndices.SpectralIndex","page":"Axioms","title":"SpectralIndices.SpectralIndex","text":"SpectralIndex(index::Dict{String, Any})\n\nThis object allows interaction with specific Spectral Indices in the Awesome Spectral Indices list. Attributes of the Spectral Index can be accessed and the index itself can be computed.\n\nArguments\n\nindex::Dict{String, Any}: A dictionary with the following keys:\n\"short_name\": Short name of the spectral index.\n\"long_name\": Long name or description of the spectral index.\n\"bands\": List of bands or wavelengths used in the index calculation.\n\"application_domain\": Application domain or use case of the spectral index.\n\"reference\": Reference or source of the spectral index formula.\n\"formula\": Mathematical formula of the spectral index.\n\"date_of_addition\": Date when the spectral index was added (in \"yyyy-mm-dd\" format).\n\"contributor\": Contributor or source of the spectral index information.\n\"platforms\": Platforms or sensors for which the index is applicable.\n\nReturns\n\nA SpectralIndex object containing the specified index information.\n\nExamples\n\njulia> indices[\"NIRv\"]\n\n\nOr, accessing directly the provided Dict of spectral indices:\n\nNIRv\n\n\n\n\n\n","category":"type"},{"location":"api/axioms/#SpectralIndices.compute","page":"Axioms","title":"SpectralIndices.compute","text":"compute(si::SpectralIndex, params::Dict=Dict(); kwargs...) -> Any\n\nComputes a Spectral Index based on the provided SpectralIndex instance, parameters, and optional keyword arguments.\n\nParameters\n\nsi: An instance of SpectralIndex which includes the name and details of the spectral index to be computed.\nparams: (Optional) Dictionary of parameters used as inputs for the computation. If not provided, parameters can be passed using keyword arguments.\nkwargs: Additional parameters used as inputs for the computation, provided as keyword pairs. These are used if params is empty.\n\nReturns\n\nThe computed Spectral Index, the type of return value depends on the input parameters and the specific spectral index being computed.\n\nExamples\n\njulia> compute(NDVI; N=0.643, R=0.175)\n\n\njulia> compute(NDVI; N=fill(0.643, (5, 5)), R=fill(0.175, (5, 5)))\n\n\n\n\n\n\n","category":"function"},{"location":"api/axioms/#SpectralIndices.PlatformBand","page":"Axioms","title":"SpectralIndices.PlatformBand","text":"PlatformBand(platform_band::Dict{String, Any})\n\nThis struct provides information about a specific band for a specific sensor or platform.\n\nArguments\n\nplatform_band::Dict{String, Any}: A dictionary with the following keys:\n\"platform\": Name of the platform or sensor.\n\"band\": Band number or name for the specific platform.\n\"name\": Description or name of the band for the specific platform.\n\"wavelength\": Center wavelength of the band (in nm) for the specific platform.\n\"bandwidth\": Bandwidth of the band (in nm) for the specific platform.\n\nReturns\n\nA PlatformBand object containing the specified band information.\n\nExamples\n\nplatform_band_dict = Dict(\n    \"platform\" => \"Sentinel-2A\",\n    \"band\" => \"B2\",\n    \"name\" => \"Blue\",\n    \"wavelength\" => 492.4,\n    \"bandwidth\" => 66.0,\n)\n\nplatform_band = PlatformBand(platform_band_dict)\n\nOr, accessing directly the provided Dict of platforms:\n\njulia> bands[\"B\"].platforms[\"sentinel2a\"]\n\n\njulia> bands[\"B\"].platforms[\"sentinel2a\"].wavelength\n\n\n\n\n\n\n","category":"type"},{"location":"api/axioms/#SpectralIndices.Band","page":"Axioms","title":"SpectralIndices.Band","text":"Band(band::Dict{String, Any})\n\nConstructs a Band object to interact with specific bands in the list of required bands for Spectral Indices in the Awesome Spectral Indices list.\n\nArguments\n\nband::Dict{String, Any}: A dictionary containing band information with the following keys:\n\"short_name\": Short name of the band.\n\"long_name\": Description or name of the band.\n\"common_name\": Common name of the band according to the Electro-Optical Extension Specification for STAC.\n\"min_wavelength\": Minimum wavelength of the spectral range of the band (in nm).\n\"max_wavelength\": Maximum wavelength of the spectral range of the band (in nm).\n\"platforms\": A dictionary of platform information associated with this band.\n\nReturns\n\nA Band object representing the specified band.\n\nExamples\n\njulia> bands[\"B\"]\nband_dict = Dict{String, Any}(\n    \"short_name\" => \"B\",\n    \"long_name\" => \"Blue\",\n    \"common_name\" => \"Blue\",\n    \"min_wavelength\" => 450.0,\n    \"max_wavelength\" => 495.0,\n    \"platforms\" => Dict{String, Any}(\n        \"sentinel2a\" => PlatformBand(...),  # PlatformBand constructor details here\n        \"sentinel2b\" => PlatformBand(...),  # PlatformBand constructor details here\n        # Add other platforms as needed\n    )\n)\n\nband = Band(band_dict)\n\nOr, using the provided bands\n\njulia> bands[\"B\"].long_name\n\n\n\n\n\n\n","category":"type"},{"location":"api/axioms/#SpectralIndices.Constant","page":"Axioms","title":"SpectralIndices.Constant","text":"Constant(constant::Dict{String, Any}) -> Constant\n\nCreate a Constant object from a dictionary.\n\nArguments\n\nconstant::Dict{String, Any}: A dictionary containing the following keys:\n\"description\": Description of the constant.\n\"short_name\": Short name of the constant.\n\"default\": Default value of the constant.\n\nReturns\n\nConstant: An instance of the Constant struct with fields populated based on the provided dictionary.\n\nExample\n\nconstant_dict = Dict(\n    \"description\" => \"Speed of light in vacuum\", \"short_name\" => \"c\", \"default\" => 299792458\n)\nconstant = Constant(constant_dict)\n\n\n\n\n\n","category":"type"},{"location":"tutorials/yaxarrays/#YAXArrays.jl","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"","category":"section"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"This tutorial will illustrate how to use SpectralIndices.jl using YAXArrays.jl as input data.","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"First of all we need to download the data like in the previous tutorial. Only this time the data is going to be higher dimensional and slighly more complex, hence the need for YAXArrays.jl. In order to do so we are going to use the load_dataset function:","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"using YAXArrays, DimensionalData\nusing SpectralIndices\nyaxa = load_dataset(\"sentinel\")","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"As it is possible to observe we have a YAXArray object with three dimensions: bands, x and y. Each band is one of the 10 m spectral bands of a Sentinel-2 image.","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"The data is stored as Int64, so let us convert it to Float and rescale it:","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"yaxa = yaxa./10000","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"Now let's compute the NDVI for this dataset!","category":"page"},{"location":"tutorials/yaxarrays/","page":"YAXArrays.jl","title":"YAXArrays.jl","text":"ndvi = compute_index(\"NDVI\";\n    N=yaxa[bands = At(\"B08\")],\n    R=yaxa[bands = At(\"B04\")])","category":"page"},{"location":"api/datasets/#Datasets","page":"Datasets","title":"Datasets","text":"","category":"section"},{"location":"api/datasets/","page":"Datasets","title":"Datasets","text":"get_datasets\nload_dataset","category":"page"},{"location":"api/datasets/#SpectralIndices.get_datasets","page":"Datasets","title":"SpectralIndices.get_datasets","text":"get_datasets(; datasets=[\"S2_10m.json\", \"spectral.json\"], data_loc=joinpath(dirname(@__FILE__), \"..\", \"data\"))\n\nDownload predefined datasets from a specified remote location and save them to a local directory.\n\nKeyword Arguments\n\ndatasets::Array{String,1}: A list of dataset filenames to download. Defaults to [\"S2_10m.json\", \"spectral.json\"].\ndata_loc::String: The local directory path where the downloaded datasets will be saved. Defaults to a data directory located one level up from the script's directory.\n\nDescription\n\nThis function iterates over a list of dataset filenames, downloads each dataset from a predefined remote URL, and saves them into a specified local directory. The remote URL is currently hardcoded to download specifically the \"S2_10m.json\" file for any given dataset in the list. Adjust the function or its usage accordingly if different URLs are needed for different datasets.\n\nExample\n\nget_datasets()  # Downloads the default datasets to the default location\n\nget_datasets(; datasets=[\"custom_dataset.json\"], data_loc=\"path/to/custom/directory\")\n\nThis is particularly useful for setting up local environments with necessary data files for further processing or analysis.\n\n\n\n\n\n","category":"function"},{"location":"api/datasets/#SpectralIndices.load_dataset","page":"Datasets","title":"SpectralIndices.load_dataset","text":"load_dataset(dataset::String) -> YAXArray\nload_dataset(dataset::String) -> DataFrame\n\nLoad a specified dataset and convert it into either a YAXArray or a DataFrame, depending on the loaded packages.\n\nArguments\n\ndataset::String: The name of the dataset to load. Currently supports \"sentinel\" and \"spectral\".\n\nReturns\n\nIf YAXArrays is loaded in the namespace, returns a YAXArray object containing the loaded dataset, with dimensions labeled as :x, :y, and :bands. The spatial dimensions (:x and :y) are assumed to have a size of 300 each, and the :bands dimension includes [\"B02\", \"B03\", \"B04\", \"B08\"] bands.\nIf DataFrames is loaded in the namespace, returns a DataFrame with the dataset loaded into it.\n\nErrors\n\nThrows an error if the dataset argument does not match one of the predefined dataset names.\n\nExample\n\n# Load dataset as YAXArray\nyax_ds = SpectralIndices.load_dataset(\"sentinel\")\n\n# Load dataset as DataFrame\ndf_ds = SpectralIndices.load_dataset(\"spectral\")\n\nThe current implementation expects the JSON files (\"S2_10m.json\" for \"sentinel\" and \"spectral.json\" for \"spectral\") to follow a specific format: a vector of vectors where each inner vector represents a band's data in a 300x300 spatial grid for the YAXArray version, or a suitable structure that can be directly converted into a DataFrame for the DataFrame version. The files are already provided for examples in the package in the folder data.\n\n\n\n\n\n","category":"function"},{"location":"api/compute/#Compute-Index","page":"Compute","title":"Compute Index","text":"","category":"section"},{"location":"api/compute/","page":"Compute","title":"Compute","text":"compute_index\ncompute_kernel","category":"page"},{"location":"api/compute/#SpectralIndices.compute_index","page":"Compute","title":"SpectralIndices.compute_index","text":"compute_index(index::String, params::Dict=Dict(), online::Bool=false; kwargs...) -> Any\n\nComputes one or more Spectral Indices from a predefined list, based on the provided index name, parameters, and optional keyword arguments.\n\nParameters\n\nindex: Name of the spectral index or a list of index names to compute.\nparams: (Optional) Dictionary of parameters used as inputs for the computation. If not provided, parameters can be passed using keyword arguments.\nonline: (Optional) Flag indicating whether to retrieve the most recent list of indices online.\nkwargs: Additional parameters used as inputs for the computation, provided as keyword pairs.\n\nReturns\n\nComputed Spectral Indices, the type of return value depends on the input parameters.\n\nExamples\n\njulia> compute_index(\"NDVI\"; N=0.643, R=0.175)\n\n\njulia> compute_index(\"NDVI\"; N=fill(0.643, (5, 5)), R=fill(0.175, (5, 5)))\n\n\njulia> compute_index(\"NDVI\"; N=fill(0.643, 5), R=fill(0.175, 5))\n\n\njulia> compute_index([\"NDVI\", \"SAVI\"]; N=fill(0.643, 5), R=fill(0.175, 5), L=fill(0.5, 5))\n\n\njulia> compute_index([\"NDVI\", \"SAVI\"]; N=0.643, R=0.175, L=0.5)\n\n\njulia> compute_index(\n           [\"NDVI\", \"SAVI\"]; N=fill(0.643, (5, 5)), R=fill(0.175, (5, 5)), L=fill(0.5, (5, 5))\n       )\n\n\n\n\n\n\n","category":"function"},{"location":"api/compute/#SpectralIndices.compute_kernel","page":"Compute","title":"SpectralIndices.compute_kernel","text":"compute_kernel(kernel, params=nothing; kwargs...)\n\nCompute a specified kernel using either provided parameters or keyword arguments.\n\nArguments\n\nkernel: The kernel function to use. Should be one of linear, poly, or RBF.\nparams: (Optional) A Dict, DataFrame, or YAXArray containing parameters for the kernel computation.\nkwargs...: Keyword arguments that will be converted to parameters if params is not provided.\n\nReturns\n\nThe result of the kernel computation, the type of which depends on the input type.\n\nExamples\n\nresult = compute_kernel(linear; params=Dict(\"a\" => 1, \"b\" => 2))\n\n\n\n\n\n","category":"function"},{"location":"api/compute/","page":"Compute","title":"Compute","text":"linear\npoly\nRBF","category":"page"},{"location":"api/compute/#SpectralIndices.linear","page":"Compute","title":"SpectralIndices.linear","text":"linear(a::Number, b::Number)\nlinear(a::AbstractArray, b::AbstractArray)\nlinear(params::Dict{String, T})\nlinear(params::DataFrame)\nlinear(params::YAXArray)\n\nCompute the linear kernel a * b. This function supports various input types, including numbers, arrays, dictionaries, data frames, and YAXArrays.\n\nArguments\n\na: First parameter for the linear kernel. Can be a number or an array.\nb: Second parameter for the linear kernel. Can be a number or an array.\nparams: A dictionary, data frame, or YAXArray containing the parameters \"a\" and \"b\".\n\nReturns\n\nThe result of a * b. The output type depends on the input types:\nIf a and b are numbers, the result is a number.\nIf a and b are arrays, the result is an array with element-wise multiplication.\nIf params is used, the result is in the same format as params (either a dictionary, DataFrame, or YAXArray).\n\nExamples\n\n# Using numbers\nresult = linear(2, 3)\n\n# Using arrays\nresult = linear([1, 2, 3], [4, 5, 6])\n\n# Using a dictionary\nresult = linear(Dict(\"a\" => 2, \"b\" => 3))\n\n# Using a DataFrame\ndf = DataFrame(; a=[1, 2, 3], b=[4, 5, 6])\nresult = linear(df)\n\n\n\n\n\n","category":"function"},{"location":"api/compute/#SpectralIndices.poly","page":"Compute","title":"SpectralIndices.poly","text":"poly(a::T, b::T, c::T, p::T) where T <: Number\npoly(a::T, b::T, c::T, p::T) where T <: AbstractArray\npoly(params::Dict{String, T})\npoly(params::DataFrame)\npoly(params::YAXArray)\n\nCompute the polynomial kernel (a * b + c) ^ p. This function supports various input types, including numbers, arrays, dictionaries, data frames, and YAXArrays.\n\nArguments\n\na: First parameter for the polynomial kernel. Can be a number or an array.\nb: Second parameter for the polynomial kernel. Can be a number or an array.\nc: Coefficient added to the product of a and b. Can be a number or an array.\np: Exponent to which the sum of the product and coefficient is raised. Can be a number or an array.\nparams: A dictionary, data frame, or YAXArray containing the parameters \"a\", \"b\", \"c\", and \"p\".\n\nReturns\n\nThe result of (a * b + c) ^ p. The output type depends on the input types:\nIf a, b, c, and p are numbers, the result is a number.\nIf a, b, c, and p are arrays, the result is an array with the operation applied element-wise.\nIf params is used, the result matches the format of params (either a dictionary, DataFrame, or YAXArray).\n\nExamples\n\n# Using numbers\nresult = poly(2, 3, 1, 2)\n\n# Using arrays\nresult = poly([1, 2, 3], [4, 5, 6], [1, 1, 1], [2, 2, 2])\n\n# Using a dictionary\nresult = poly(Dict(\"a\" => 2, \"b\" => 3, \"c\" => 1, \"p\" => 2))\n\n# Using a DataFrame\ndf = DataFrame(; a=[1, 2, 3], b=[4, 5, 6], c=[1, 1, 1], p=[2, 2, 2])\nresult = poly(df)\n\n\n\n\n\n","category":"function"},{"location":"api/compute/#SpectralIndices.RBF","page":"Compute","title":"SpectralIndices.RBF","text":"RBF(a::T, b::T, sigma::T) where T <: Number\nRBF(a::T, b::T, sigma::T) where T <: AbstractArray\nRBF(params::Dict{String, T})\nRBF(params::DataFrame)\nRBF(params::YAXArray)\n\nCompute the Radial Basis Function (RBF) kernel exp((-1.0 * (a - b) ^ 2.0) / (2.0 * sigma ^ 2.0)). This function supports various input types, including numbers, arrays, dictionaries, data frames, and YAXArrays.\n\nArguments\n\na: First parameter for the RBF kernel. Can be a number or an array.\nb: Second parameter for the RBF kernel. Can be a number or an array.\nsigma: Length-scale parameter for the RBF kernel. Can be a number or an array.\nparams: A dictionary, data frame, or YAXArray containing the parameters \"a\", \"b\", and \"sigma\".\n\nReturns\n\nThe result of the RBF kernel. The output type depends on the input types:\nIf a, b, and sigma are numbers, the result is a number.\nIf a, b, and sigma are arrays, the result is an array with the operation applied element-wise.\nIf params is used, the result matches the format of params (either a dictionary, DataFrame, or YAXArray).\n\nExamples\n\n# Using numbers\nresult = RBF(1, 2, 0.5)\n\n# Using arrays\nresult = RBF([1, 2, 3], [4, 5, 6], [0.5, 0.5, 0.5])\n\n# Using a dictionary\nresult = RBF(Dict(\"a\" => 1, \"b\" => 2, \"sigma\" => 0.5))\n\n# Using a DataFrame\ndf = DataFrame(; a=[1, 2, 3], b=[4, 5, 6], sigma=[0.5, 0.5, 0.5])\nresult = RBF(df)\n\n\n\n\n\n","category":"function"},{"location":"tutorials/dataframes/#DataFrames.jl","page":"DataFrames.jl","title":"DataFrames.jl","text":"","category":"section"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"This section of the documentation will help you understand how to work with SpectralIndices.jl using DataFrames.jl as input.","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"This tutorial relies on data stored in data. To access it we are going to use the following:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"using SpectralIndices, DataFrames\ndf = load_dataset(\"spectral\")\nfirst(df, 5)","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"Each column of this dataset is the Surface Reflectance from Landsat 8 for 3 different classes. The samples were taken over Oporto. The data is taken from spyndex and this tutorial is meant to closely mirror the python version.","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"This dataset specifically contains three different classes:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"unique(df[!, \"class\"])","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"so to reflect that we are going to calculate three different indices: NDVI for vegetation, NDWI for water and NDBI for urban.","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDVI","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDWI","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDBI","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"We have multiple ways to feed this data to SectralIndices.jl to generate our indices. We will try to cover most of them here.","category":"page"},{"location":"tutorials/dataframes/#From-DataFrame-to-DataFrame","page":"DataFrames.jl","title":"From DataFrame to DataFrame","text":"","category":"section"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"A straightforward way to obtain the calculation of the indices is to feed a DataFrame to compute_index. In order to do this we need first to build the new DataFrame. We can explore which bands we need by calling the bands field in the indices:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDVI.bands","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDWI.bands","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDBI.bands","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"In this case we are going to need only Green, Red, NIR and SWIR1 bands. Since the compute_index expects the bands to have the same name as the have in the bands field we need to select the specific columns that we want out of the dataset and rename them. We can do this easily with select:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"params = select(df, :SR_B3=>:G, :SR_B4=>:R, :SR_B5=>:N, :SR_B6=>:S1)\nfirst(params, 5)","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"Now our dataset is ready, and we just need to call the compute_index function","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"idx = compute_index([\"NDVI\", \"NDWI\", \"NDBI\"], params)\nfirst(idx, 5)","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"The result is a new DataFrame with the desired indices as columns.","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"Another way to obtain this is to feed single DataFrames as kwargs. First we need to define the single DataFrames:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"\nidx = compute_index([\"NDVI\", \"NDWI\", \"NDBI\"]; \n    G = select(df, :SR_B3=>:G),\n    N = select(df, :SR_B5=>:N),\n    R = select(df, :SR_B4=>:R),\n    S1 = select(df, :SR_B6=>:S1))\nfirst(idx, 5)","category":"page"},{"location":"tutorials/dataframes/#From-DataFrame-to-Vector","page":"DataFrames.jl","title":"From DataFrame to Vector","text":"","category":"section"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"Alternatively you can define a Dict for the indices from the DataFrame, going back to an example we saw in the previous page:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"params = Dict(\"G\" => df[!, \"SR_B3\"], \"N\" => df[!, \"SR_B5\"], \"R\" => df[!, \"SR_B4\"], \"S1\" => df[!, \"SR_B6\"])","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"The computation is done in the same way:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"ndvi, ndwi, ndbi = compute_index([\"NDVI\", \"NDWI\", \"NDBI\"], params)","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"Just be careful with the naming, SpectralIndices.jl brings into the namespace all the indices as defined in indices. The all caps version of the indices is reserved for them, as we illustrated at the beginning of this tutorial:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"NDVI","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"The two steps can be merged by providing the values directly as kwargs:","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"ndvi, ndwi, ndbi = compute_index([\"NDVI\", \"NDWI\", \"NDBI\"]; \n    G = df[!, \"SR_B3\"],\n    N = df[!, \"SR_B5\"],\n    R = df[!, \"SR_B4\"],\n    S1 = df[!, \"SR_B6\"])","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"You are free to choose whichever method you prefer, there is no meaningful trade-off in speed","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"@time ndvi, ndwi, ndbi = compute_index([\"NDVI\", \"NDWI\", \"NDBI\"], params)","category":"page"},{"location":"tutorials/dataframes/","page":"DataFrames.jl","title":"DataFrames.jl","text":"@time ndvi, ndwi, ndbi = compute_index([\"NDVI\", \"NDWI\", \"NDBI\"]; \n           G = df[!, \"SR_B3\"],\n           N = df[!, \"SR_B5\"],\n           R = df[!, \"SR_B4\"],\n           S1 = df[!, \"SR_B6\"])","category":"page"},{"location":"#SpectralIndices.jl-Documentation","page":"SpectralIndices.jl","title":"SpectralIndices.jl Documentation","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"Welcome to the documentation for SpectralIndices.jl, a comprehensive Julia package for calculating a wide array of spectral indices used in remote sensing and environmental monitoring.","category":"page"},{"location":"#Overview","page":"SpectralIndices.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"SpectralIndices.jl simplifies the computation of spectral indices, offering support for both standard and custom indices. The package is designed for efficiency and ease of use, catering to both researchers and practitioners in the field of remote sensing.","category":"page"},{"location":"#Features","page":"SpectralIndices.jl","title":"Features","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"Supports a broad range of predefined spectral indices.\nCustom index creation capabilities.\nFlexible input options for various data types.\nEfficient computation for large datasets.","category":"page"},{"location":"#Getting-Started","page":"SpectralIndices.jl","title":"Getting Started","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"To get started with SpectralIndices.jl, follow these steps:","category":"page"},{"location":"#Installation","page":"SpectralIndices.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"To install SpectralIndices.jl, use the following Julia command:","category":"page"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"using Pkg\nPkg.add(\"SpectralIndices\")","category":"page"},{"location":"#Basic-usage","page":"SpectralIndices.jl","title":"Basic usage","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"Here's a simple example to compute the NDVI spectral index:","category":"page"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"using SpectralIndices\n\nNDVI_result = compute_index(\"NDVI\", N = 0.643, R = 0.175)","category":"page"},{"location":"#License","page":"SpectralIndices.jl","title":"License","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"SpectralIndices.jl is released under the MIT License.","category":"page"},{"location":"#Citation","page":"SpectralIndices.jl","title":"Citation","text":"","category":"section"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"If you use SpectralIndices.jl in your research, please cite it as follows:","category":"page"},{"location":"","page":"SpectralIndices.jl","title":"SpectralIndices.jl","text":"@article{montero2023standardized,\n  title={A standardized catalogue of spectral indices to advance the use of remote sensing in Earth system research},\n  author={Montero, David and Aybar, C{\\'e}sar and Mahecha, Miguel D and Martinuzzi, Francesco and S{\\\"o}chting, Maximilian and Wieneke, Sebastian},\n  journal={Scientific Data},\n  volume={10},\n  number={1},\n  pages={197},\n  year={2023},\n  publisher={Nature Publishing Group UK London}\n}","category":"page"},{"location":"tutorials/basic_types/#Built-in-types","page":"Basics","title":"Built-in types","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"This guide provides a comprehensive overview of utilizing SpectralIndices.jl with Julia's built-in types and data structures. By exploring these foundational elements, you'll gain valuable insights into the package's functionality and its application in calculating spectral indices like NDVI and SAVI.","category":"page"},{"location":"tutorials/basic_types/#Introduction-to-Indices-Calculation","page":"Basics","title":"Introduction to Indices Calculation","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Let's begin with an example involving two data points representing the near-infrared (NIR) and red reflectances of vegetation, stored as Int values:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"nir = 6723\nred = 1243","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Our goal is to calculate the Normalized Difference Vegetation Index (NDVI). NDVI is a widely used spectral index for monitoring vegetation health, calculated using NIR and red reflectances. The formula for NDVI is:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"NDVI = fracNIR-RedNIR+Red","category":"page"},{"location":"tutorials/basic_types/#Direct-Calculation-with-NDVI-Struct","page":"Basics","title":"Direct Calculation with NDVI Struct","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"SpectralIndices.jl provides a straightforward method for computing NDVI:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"using SpectralIndices\nNDVI","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"This outputs the NDVI struct, containing all necessary information. The struct can also be used as a function to compute NDVI:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"NDVI(nir, red)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"This method is direct but not the recommended approach for computing indices. When using this method, ensure the parameter order matches the bands field of the SpectralIndex:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"NDVI.bands","category":"page"},{"location":"tutorials/basic_types/#Using-the-compute-Function","page":"Basics","title":"Using the compute Function","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"A more flexible way to calculate indices is through the compute function. This function accepts the SpectralIndex struct and parameters as either a dictionary or keyword arguments:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"params = Dict(\n    \"N\" => nir,\n    \"R\" => red\n)\nndvi = compute(NDVI, params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"!!! warn Please ensure dictionary keys match the band names specified in the bands field.","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Additionally you can pass the values as kwargs as follows:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi = compute(NDVI; N=nir, R=red)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Order of keyword arguments does not affect the outcome:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi1 = compute(NDVI; N=nir, R=red)\nndvi2 = compute(NDVI; R=red, N=nir)\nndvi1 == ndvi2","category":"page"},{"location":"tutorials/basic_types/#Using-compute_index","page":"Basics","title":"Using compute_index","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Lastly, you can use compute_index to compute it. The precedure is identical to what has been shown so far for compute, but the specification of the index is done by passing its name in a String:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"params = Dict(\n    \"N\" => nir,\n    \"R\" => red\n)\nndvi = compute_index(\"NDVI\", params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Or, using the kwargs:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi = compute_index(\"NDVI\"; N=nir, R=red)","category":"page"},{"location":"tutorials/basic_types/#Handling-Floats","page":"Basics","title":"Handling Floats","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"For Floats the procedure is similar. We will illustrate the example with the SAVI index","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"SAVI","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"This index needs the following bands:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"SAVI.bands","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"The L parameter is new in this example. Thankfully, SpectralIndices.jl provides a list of constant values handy that we can leverage in this situation:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"constants[\"L\"]","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"So now that we know what L is or does, we can use it in our calculation of the SAVI index. But first we are going to redefine the values to be Floats since we want to showcase some properties of SpectralIndices.jl with that data type. Additionally, SAVI needs imput values to be between -1 and 1:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"nir /= 10000\nred /= 10000","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Now we can proceed as before. Either using a Dict to built our parameters:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"params = Dict(\n    \"N\" => nir,\n    \"R\" => red,\n    \"L\" => 0.5\n)\nsavi = compute(SAVI, params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"or by passing them as kwargs:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"savi = compute(SAVI; N=nir, R=red, L=0.5)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"And the same holds true for compute_index as well:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"params = Dict(\n    \"N\" => nir,\n    \"R\" => red,\n    \"L\" => 0.5\n)\nsavi = compute_index(\"SAVI\", params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"savi = compute_index(\"SAVI\"; N=nir, R=red, L=0.5)","category":"page"},{"location":"tutorials/basic_types/#Support-for-Different-Float-Types","page":"Basics","title":"Support for Different Float Types","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"In both examples we see that the returned value is a Float64, since this is what we gave the function as input:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"savi1 = compute_index(\"SAVI\", params)\nsavi2 = compute_index(\"SAVI\"; N=nir, R=red, L=0.5)\n\neltype(savi1) == eltype(savi2) == Float64","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"We can also compute spectral indices with other float types, such as Float32 or Float16. All it needs is to feed the compute or the compute_index function input points of the chosen Float type. This is specifically helpful for machine learning applications, where Float32 are the default:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"T = Float32\nparams = Dict(\n    \"N\" => T(nir),\n    \"R\" => T(red),\n    \"L\" => 0.5f0\n)\n\nsavi1 = compute_index(\"SAVI\", params)\nsavi2 = compute_index(\"SAVI\"; N=T(nir), R=T(red), L=0.5f0)\n\neltype(savi1) == eltype(savi2) == Float32","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"The same also holds for Float16:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"T = Float16\nparams = Dict(\n    \"N\" => T(nir),\n    \"R\" => T(red),\n    \"L\" => T(0.5)\n)\n\nsavi1 = compute_index(\"SAVI\", params)\nsavi2 = compute_index(\"SAVI\"; N=T(nir), R=T(red), L=T(0.5))\n\neltype(savi1) == eltype(savi2) == Float16","category":"page"},{"location":"tutorials/basic_types/#Computing-Multiple-Indices","page":"Basics","title":"Computing Multiple Indices","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Now that we have added more indices we can explore how to compute multiple indices at the same time. All is needed is to pass a Vector of Strings to the compute_index function with the chosen spectral indices inside, as well as the chosen parameters of course:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"params = Dict(\n    \"N\" => nir,\n    \"R\" => red,\n    \"L\" => 0.5\n)\nndvi, savi = compute_index([\"NDVI\", \"SAVI\"], params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"Alternatively, using kwargs:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi, savi = compute_index([\"NDVI\", \"SAVI\"]; N=nir, R=red, L=0.5)","category":"page"},{"location":"tutorials/basic_types/#Extension-to-Vectors","page":"Basics","title":"Extension to Vectors","text":"","category":"section"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"The extension to Vectors is relatively straightforward. We follow the same procedure as before, defining our parameters, only this time they are arrays:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"params = Dict(\n    \"N\" => fill(nir, 10),\n    \"R\" => fill(red, 10),\n    \"L\" => fill(0.5, 10)\n)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"After that we can compute either one, or both indices:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi, savi = compute_index([\"NDVI\", \"SAVI\"], params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi = compute_index(\"NDVI\", params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"savi = compute_index(\"SAVI\", params)","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"And as always, we can also pass them as kwargs:","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi, savi = compute_index([\"NDVI\", \"SAVI\"];\n    N=fill(nir, 10),\n    R=fill(red, 10),\n    L=fill(0.5, 10))","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"ndvi = compute_index(\"NDVI\";\n    N=fill(nir, 10),\n    R=fill(red, 10),\n    L=fill(0.5, 10))","category":"page"},{"location":"tutorials/basic_types/","page":"Basics","title":"Basics","text":"savi = compute_index(\"SAVI\";\n    N=fill(nir, 10),\n    R=fill(red, 10),\n    L=fill(0.5, 10))","category":"page"}]
}
